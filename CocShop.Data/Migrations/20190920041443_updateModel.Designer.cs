// <auto-generated />
using System;
using CocShop.Data.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocShop.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190920041443_updateModel")]
    partial class updateModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocShop.Data.Entity.HubUserConnection", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Connection")
                        .HasColumnName("Connection");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_By");

                    b.Property<string>("UserId")
                        .HasColumnName("User_Id");

                    b.Property<string>("Username")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Hub_User_Connection");
                });

            modelBuilder.Entity("CocShop.Data.Entity.Image", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By");

                    b.Property<string>("Path");

                    b.Property<string>("ProductId")
                        .HasColumnName("Product_Id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_By");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("CocShop.Data.Entity.Location", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By");

                    b.Property<bool?>("IsDelete")
                        .HasColumnName("Is_Delete");

                    b.Property<string>("LocationName")
                        .HasColumnName("Location_Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_By");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Claim");
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .HasColumnName("Full_Name");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_By");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("User_Claim");
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("User_Login");
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("User_Role");
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyUserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("User_Token");
                });

            modelBuilder.Entity("CocShop.Data.Entity.Notification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Body");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsSeen");

                    b.Property<bool>("IsTouch");

                    b.Property<string>("NData");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_By");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("CocShop.Data.Entity.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By");

                    b.Property<string>("CreatedUserId")
                        .HasColumnName("Created_User_Id");

                    b.Property<string>("DeliveryUserId")
                        .HasColumnName("Delivery_User_Id");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("Is_Delete");

                    b.Property<string>("LocationId")
                        .HasColumnName("Location_Id");

                    b.Property<string>("PaymentId")
                        .HasColumnName("Payment_Id");

                    b.Property<string>("Status")
                        .HasColumnName("Status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnName("Total_Price");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnName("Total_Quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_By");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeliveryUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("CocShop.Data.Entity.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By");

                    b.Property<string>("OrderId")
                        .HasColumnName("Order_Id");

                    b.Property<decimal?>("Price")
                        .HasColumnName("Price");

                    b.Property<string>("ProductId")
                        .HasColumnName("Product_Id");

                    b.Property<int>("Quantity")
                        .HasColumnName("Quantity");

                    b.Property<double?>("Total")
                        .HasColumnName("Total");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_By");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("CocShop.Data.Entity.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CardNumber")
                        .HasColumnName("Card_Number");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("Date_From");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("Date_To");

                    b.Property<bool?>("IsDelete")
                        .HasColumnName("Is_Delete");

                    b.Property<string>("OtherDetail")
                        .HasColumnName("Other_Detail");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_By");

                    b.Property<string>("UserId")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payment_Method");
                });

            modelBuilder.Entity("CocShop.Data.Entity.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("CateId")
                        .HasColumnName("Cate_Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<bool>("IsBest")
                        .HasColumnName("Is_Best");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("Is_Delete");

                    b.Property<bool>("IsNew")
                        .HasColumnName("Is_New");

                    b.Property<bool>("IsSale")
                        .HasColumnName("Is_Sale");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price");

                    b.Property<double?>("PriceSale")
                        .HasColumnName("Price_Sale");

                    b.Property<string>("ProductName")
                        .HasColumnName("Product_Name");

                    b.Property<int>("Quantity")
                        .HasColumnName("Quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_By");

                    b.HasKey("Id");

                    b.HasIndex("CateId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("CocShop.Data.Entity.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("Created_By");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("Is_Delete");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("Updated_By");

                    b.HasKey("Id");

                    b.ToTable("Product_Category");
                });

            modelBuilder.Entity("CocShop.Data.Entity.HubUserConnection", b =>
                {
                    b.HasOne("CocShop.Data.Entity.MyUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocShop.Data.Entity.Image", b =>
                {
                    b.HasOne("CocShop.Data.Entity.Product", "Product")
                        .WithMany("Image")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyRoleClaim", b =>
                {
                    b.HasOne("CocShop.Data.Entity.MyRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyUserClaim", b =>
                {
                    b.HasOne("CocShop.Data.Entity.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyUserLogin", b =>
                {
                    b.HasOne("CocShop.Data.Entity.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyUserRole", b =>
                {
                    b.HasOne("CocShop.Data.Entity.MyRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CocShop.Data.Entity.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CocShop.Data.Entity.MyUserToken", b =>
                {
                    b.HasOne("CocShop.Data.Entity.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CocShop.Data.Entity.Notification", b =>
                {
                    b.HasOne("CocShop.Data.Entity.MyUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocShop.Data.Entity.Order", b =>
                {
                    b.HasOne("CocShop.Data.Entity.MyUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CocShop.Data.Entity.MyUser", "DeliveryUser")
                        .WithMany()
                        .HasForeignKey("DeliveryUserId");

                    b.HasOne("CocShop.Data.Entity.Location", "Location")
                        .WithMany("Order")
                        .HasForeignKey("LocationId");

                    b.HasOne("CocShop.Data.Entity.PaymentMethod", "Payment")
                        .WithMany("Order")
                        .HasForeignKey("PaymentId");
                });

            modelBuilder.Entity("CocShop.Data.Entity.OrderDetail", b =>
                {
                    b.HasOne("CocShop.Data.Entity.Order", "Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderId");

                    b.HasOne("CocShop.Data.Entity.Product", "Product")
                        .WithMany("OrderDetail")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("CocShop.Data.Entity.PaymentMethod", b =>
                {
                    b.HasOne("CocShop.Data.Entity.MyUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CocShop.Data.Entity.Product", b =>
                {
                    b.HasOne("CocShop.Data.Entity.ProductCategory", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CateId");
                });
#pragma warning restore 612, 618
        }
    }
}
